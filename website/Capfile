# Capistrano 2.x recipe file
#
# Requirement cap 2.1

set :application, "openaustralia-app"

set :scm, :git
set :scm_command, "/opt/local/bin/git"
# This works even when the remote server does not have git installed
set :deploy_via, :copy

# default_run_options[:pty] = true

set :repository, "/Library/WebServer/Documents/openaustralia-app"

set :use_sudo, false

local_deploy = true

if local_deploy
	set :deploy_to, "/Library/WebServer/Documents/test-deploy/#{application}"
	role :web, "localhost"
	set :user, "matthewl"
else
	set :deploy_to, "/home/3716/domains/openaustralia.org/#{application}"
	role :web, "openaustralia.org"
	set :user, "serveradmin%openaustralia.org"
end

load 'deploy' if respond_to?(:namespace) # cap2 differentiator

namespace :deploy do
	task :setup do
		dirs = [deploy_to, releases_path, shared_path]
		shared_images_path = File.join(shared_path, "images")
		dirs += ["mps", "mpsL"].map {|d| File.join(shared_images_path, d)}
		run "umask 02 && mkdir -p #{dirs.join(' ')}"
	end

	# Do nothing for deploy:restart
	task :restart do
	end

	task :finalize_update do
		run "chmod -R g+w #{latest_release}" if fetch(:group_writable, true)
	end

	desc "After a code update, we link the images directories to the shared ones"
	task :after_update_code do
		links = {"#{release_path}/twfy/www/docs/images/mps" => "#{shared_path}/images/mps",
			"#{release_path}/twfy/www/docs/images/mpsL" => "#{shared_path}/images/mpsL",
			"#{release_path}/twfy/conf/general" => "#{shared_path}/general",
			"#{release_path}/twfy/www/docs/.htaccess" => "#{shared_path}/root_htaccess"}
		
		run "rm -rf #{links.keys.join(' ')}"
		links.each_pair {|src, dst| run "ln -s #{dst} #{src}"} 
	end
	
	desc "Upload member images from local machine"
	task :images do
		put_directory "../pwdata/images/mps", "#{shared_path}/images/mps"
		put_directory "../pwdata/images/mpsL", "#{shared_path}/images/mpsL"
	end
end

require 'tempfile'

def put_directory(source, destination)
	dir = File.basename(source)
	throw "Problem with the destination path" if File.basename(destination) != dir
	src = File.dirname(source)
	dst = File.dirname(destination)
	
	tmpdir = Dir.tmpdir
	filename = "#{tmpdir}/#{dir}.tar.gz"
	remote_filename = "/tmp/#{dir}.tar.gz"
	Dir.chdir(src) do
		system("tar", "czf", filename, "#{dir}")
	end
    content = File.open(filename, "rb") { |f| f.read }
    put content, remote_filename
	# Extract archive on remote machine
	run "cd #{dst}; tar xf #{remote_filename}; rm #{remote_filename}"
	# Clean up
	system("rm #{filename}")
end
