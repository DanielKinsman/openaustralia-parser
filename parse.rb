#!/usr/bin/env ruby

require 'rubygems'
require 'mechanize'
require 'builder'

# House Hansard for 20 September 2007
url = "http://parlinfoweb.aph.gov.au/piweb/browse.aspx?path=Chamber%20%3E%20House%20Hansard%20%3E%202007%20%3E%2020%20September%202007"

# Required to workaround long viewstates generated by .NET (whatever that means)
# See http://code.whytheluckystiff.net/hpricot/ticket/13
Hpricot.buffer_size = 262144

agent = WWW::Mechanize.new
page = agent.get(url)

xml = File.open('debates2007-09-20.xml', 'w')
x = Builder::XmlMarkup.new(:target => xml, :indent => 1)

# Structure of the page is such that we are only interested in some of the links
for link in page.links[30..-3] do
	# Only going to consider speeches for the time being
	if link.to_s =~ /Speech:/
  	# Link text for speech has format:
  	# HEADING > NAME > HOUR:MINS:SECS
  	split = link.to_s.split('>').map{|a| a.strip}
  	puts "Warning: Expected split to have length 3" unless split.size == 3
  	time = split[2]
  	# Reverse order of name
  	speaker_first_name = split[1].split(',')[1].strip
  	speaker_last_name = split[1].split(',')[0].strip
  	speakername = speaker_first_name + " " + speaker_last_name
   	sub_page = agent.click(link)
   	# Extract permanent URL of this subpage
   	url = sub_page.links.text("[Permalink]").uri
  	# Type of page. Possible values: No, Speech, Bills
  	type = sub_page.search('//span[@id=dlMetadata__ctl7_Label3]/*').to_s
  	puts "Warning: Expected type Speech but was type #{type}" unless type == "Speech"
  	content = sub_page.search('//div#contentstart/*')
   	# Top level div classes in content
	  x.speaker(:speakername => speakername, :time => time, :url => url) { x << content.to_s }
  end
end

xml.close
