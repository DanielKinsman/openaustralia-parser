require 'rubygems'
require 'RMagick'
require 'mechanize_proxy'

require 'configuration'
require 'name'

# TODO: Rename class
class PeopleImageDownloader
  @@SMALL_THUMBNAIL_WIDTH = 44
  @@SMALL_THUMBNAIL_HEIGHT = 59

  def initialize
    # Required to workaround long viewstates generated by .NET (whatever that means)
    # See http://code.whytheluckystiff.net/hpricot/ticket/13
    Hpricot.buffer_size = 262144

    @conf = Configuration.new
    @agent = MechanizeProxy.new
    @agent.cache_subdirectory = "member_images"
  end

  def download(people, small_image_dir, large_image_dir)
    each_person_bio_page do |page|
      name, birthday, image = extract_name(page), extract_birthday(page), extract_image(page)

      if name
        # Small HACK - removing title of name
        name = Name.new(:first => name.first, :middle => name.middle, :last => name.last, :post_title => name.post_title)
        person = people.find_person_by_name_and_birthday(name, birthday)
        if person
          # If no image was found then silently skip over saving the image
          if image
            image.resize_to_fit(@@SMALL_THUMBNAIL_WIDTH, @@SMALL_THUMBNAIL_HEIGHT).write(small_image_dir + "/#{person.id_count}.jpg")
            image.resize_to_fit(@@SMALL_THUMBNAIL_WIDTH * 2, @@SMALL_THUMBNAIL_HEIGHT * 2).write(large_image_dir + "/#{person.id_count}.jpg")
          end
        else
          puts "WARNING: Skipping photo for #{name.full_name} because they don't exist in the list of people"
        end
      else
        puts "WARNING: Couldn't find name on page"
      end
    end
  end

  # For each person lookup their biography page on aph and use that to determine their aph_person_id. This is used
  # later on to lookup speakers based on the link to their biography page. This is turn is double-checked with their
  # name.
  def attach_aph_person_ids(people)
    each_person_bio_link do |link, name_text|
      name = Name.last_title_first(name_text)
      matches = people.find_people_by_name(name)
      # If there's more than one match for this person based on the name alone, click on the link, lookup their birthday
      # and use that in a match as well
      if matches.size > 1
        birthday = extract_birthday(@agent.click(link))
        person = people.find_person_by_name_and_birthday(name, birthday)
      else
        person = matches.first
      end
      if person.nil?
        puts "WARNING: Can not find '#{name.full_name}'"
      else
        if link.href =~ /^view_document.aspx\?ID=(\d+)&TABLE=BIOGS/
          person.aph_id = $~[1].to_i
          puts "INFO: #{person.name.full_name} has aph_id #{person.aph_id}"
        else
          puts "ERROR: Link href: '#{link.href}' on biography page has unexpected format"
        end
      end
    end
    
    # Step through all the people and highlight the people that don't have aph person id's
    #people_without_ids = people.find_all{|person| person.aph_id.nil?}
    #unless people_without_ids.empty?
    #  puts "WARNING: The following people don't have aph person id's: #{people_without_ids.map{|person| person.name.full_name}.join(', ')}"
    #end
  end
  
  def each_person_bio_link
    links = @agent.get(@conf.current_house_members_url).links + @agent.get(@conf.current_senate_members_url).links +
      @agent.get(@conf.former_members_house_and_senate_url).links
    links.each do |link|
      if link.to_s =~ /^Biography for (.*)$/
        yield link, $~[1]
      end
    end
  end
  
  def each_person_bio_page
    each_person_bio_link do |link, name_text|
      @agent.transact {yield @agent.click(link)}
    end
  end

  def extract_name(page)
    begin
      name = Name.last_title_first(page.search("#txtTitle").inner_text.to_s[14..-1])
    rescue
      #Mr X strikes again! http://parlinfoweb.aph.gov.au/piweb/view_document.aspx?ID=15517&TABLE=BIOGS
      puts "WARNING: Skipping photo download; '#{page.search("#txtTitle").inner_text.to_s[14..-1]}' is an invalid name."
      return
    end
    name
  end
  
  def extract_birthday(page)
    #Try to scrape the member's birthday.
    #Here's an example of what we are looking for:
    #<H2>Personal</H2>
    #<P>Born 9.1.42
    # or
    #<H2>Personal</H2><P>
    #<P>Born 4.11.1957

    born = page.parser.to_s.match("Born\\s\\d\\d?\\.\\d\\d?\\.\\d\\d(\\d\\d)?")
    if(born and born.to_s.size > 0)
      born_text = born.to_s[5..-1]
      born_text = born_text.insert(-3, "19") if born_text.match("\\.\\d\\d$") # change 9.1.42 to 9.1.1942
      birthday = Date.strptime(born_text, "%d.%m.%Y")
    else
      birthday = nil
    end
    birthday
  end
  
  def extract_image(page)
    img_tag = page.search('div#contentstart').search("img").first
    if img_tag
      relative_image_url = img_tag.attributes['src']
      if relative_image_url != "images/top_btn.gif"
        begin
          res = @agent.get(relative_image_url)
          return Magick::Image.from_blob(res.body)[0]
        rescue RuntimeError, Magick::ImageMagickError, WWW::Mechanize::ResponseCodeError
          return nil
        end
      end
    end
  end
end